design.txt

Python is going to be the first output language, so that AQA
style Pseudo code can be converted into first-cut python
for further development. This will be useful for school children
to develop the basis of an algorithm in pseudo code, and then
convert this into Python to further develop it.

JUST DONE
tested hexascii ok



--------------------------------------------------------------------------------

Looks like string contact of numbers does not work, as it would need to
str() it - although it doesn't know until runtime what the value is of any
expression, so you couldn't generate code to do this. It would look odd
as it would str() everything.

String literals would be known though. So if it is OUTPUT STRING as a special
case it could drop the str(), and any expression could put str() around each
part. Althought the expression at that point is just a string of symbols,
not a list of parts, so you wouldn't know how to process them.

For this to work, everything in an expression would have to be a list
so it could be processed in parts, but then you would effectively be parsing
it again.

It might be better to solve this where it is needed by a different, more powerful
runtime formatter function.




--------------------------------------------------------------------------------

feedback from real use projects:

0. import needs to maintain encapsulation

Otherwise we get namespace pollution and variable clashes.

i.e. USE "hexascii" needs to be import hexascii

Then when we refer to hexascii_ in a function name, it needs to translate
it to hexascii. (although we want to allow underscores in names, so perhaps
some other symbol to mean a library qualifier)

This will enforce better module encapsulation and stop module local variables
becoming global and clashing with other names.

how about single colon to mean a library binding?
Make sure it doesn't clash with colon of CASE, we need to change the
grammar to support this. Perhaps @ would be better?

USE "hexascii"

becomes:

import hexascii


hexascii@fromstr()

becomes:
  hexascii.fromstr()

--------------------------------------------------------------------------------

1. is there a way to do intrinsic functions,
so that rather than being expanded as a function call, they get expanded inline?

The best example of this might be hexascii_fromstr("03")
which could be generated inline as int("03", base=16) rather than calling a function.

e.g. bit_and(left, right) would be generated as:
  def bit_and(left, right):
    return left & right

It would be used as

  value<-bit_and(a, b)

which is:

  value = bit_and(a, b)

But an intrinsic would generate
  value = (a & b)

So as long as it was a function with no side effects (effectively a lambda)
it could be expanded inline.

This might be hard to write in pseudo code to generate the lambda.
Need to think how this would translate to different target languages like
C/PHP and others.

One way to do this might be to use a magic comment, annotation, or naming convention
on a function, so that the generator can build a table of intrinsic functions, and
when it sees a function call, consult the table, and either do a normal function
call, or inline the code.

This does mean that the source needs to be available in order to inline the
code (and that the underlying language supports reflection). In C, for example,
this might more naturally be a #define macro. Java would be harder as the
source could not be introspected.

Perhaps a more generic macro facility is required, where any function that is
an intrinsic could return a string which is the code template, and the
generator then applies that template via normal macro expansion. That would
then work in any language - the underlying function, rather than being the
code that is called, could return the string representation of that code.
For some languages like python, source introspection might still be usable,
so effectively calling the function returns the string representation of the
source inside it.

--------------------------------------------------------------------------------

2. is there a way to do instrinsic procedures,
so that they are expanded inline?

See notes above too.

e.g. def sort(a):
       while True:
         swapped = False
         for i in range(0, len(a)-1):
           if a[i+1] < a[i]:
             t = a[i+1]
             a[i+1] = a[i]
             a[i] = t
             swapped = True
         if not swapped: break

in use it would be:
  code here
  sort(a)
  code here

Which would generate:
  code here
       while True:
         swapped = False
         for i in range(0, len(a)-1):
           if a[i+1] < a[i]:
             t = a[i+1]
             a[i+1] = a[i]
             a[i] = t
             swapped = True
         if not swapped: break
  code here

Would need to be careful with variable names so they don't clash
with the names in the outer scope - this might be quite dangerous
if not handled carefully.


--------------------------------------------------------------------------------

building code

Need a way to specify build rules etc, a very simple makefile or script.
A nice way to do this would be to use a pcode program to specify the build
steps and build rules. This could then be auto-generated into the target
language and run as the target language.

--------------------------------------------------------------------------------


*** Add to the grammar and update notes for 'language extensions'
in README.md






--------------------------------------------------------------------------------
PACKAGING AND DISTRIBUTION

The point of this is to be able to package the whole toolsuite up as a python
zip archive with a __main__ in it, and for the runtime support files to magically
pop out of the zip file into the user script directory when you run the tool.
This will make distribution and use much easier.

In theory, just distribute a zip file and give them an instruction on how to
run the tool. All the necessary files will then be bound into a single file,
which works nice as a distributable package.

Could add an option to blurt out the io and array contents into the top of the
out.py file, instead of as separate files, thus generating a single python file
that can be distributed by the end user.

* run an experiment to work out the best way to embed a whole
  python module inside a python module, so that it can be
  programatically streamed out when embedded in a zip file.
  Code it up manually, be careful of escaping quotes etc.

* work out what the interface to this module is - probably
  just call a function with a file handle, and it appends it's
  docstring contents to that file handle (much better than returning
  a string and then writing that, more efficient)

* write a tool that embeds all of the files in a nominated folder
  into a single python file as big docstrings - this will be useful
  for embedding code into a zip package in a way that it can then
  just be streamed out on demand to another file in the filing system.
  Be careful of escaping quotes etc properly.

* Put this tool in the build dir

* Change the build script so that it runs this on the runtime folder
  and generates a runtime.py

* work out path to user script when parser runs

* Test that we can put this inside a zip file, run the zip file
  from python and it generates

* on parser run, auto copy io.py and array.py to user script dir
  (use file read/write rather than copy, so it works from within zip?
  need to verify we can find a way to read resources from a zip, might
  have to embed the code as a docstring so that we can read it out
  as a resource, in case the .zip is execute only.)

* auto import io.py and array.py at top of every program

Look into packaging the whole thing as a zip file with a __main__.py inside it,
and check that this works with both python2 and python3 - i.e. can we just
run python pcode.zip myprog.aqa on any platform and it will work?

The aqa_io.py and aqa_array.py modules will be embedded inside a folder in the zip
and bytestream'ed out into the user script directory every time they run the tool.
That way if they damage the file, it will be replaced on each build.

Need to write some documentation on the grammar with examples

Need to write some documentation on how to run the tool


--------------------------------------------------------------------------------
TIDY UP (LOW PRIORITY STUFF)

comments should pass through unmodified to the output code!!!
(be a real pain do, but anoying for users to loose all their comments
on translation!)

This is really hard to do, because we don't want to make comments a
gramatical item. But to get it positionally correct, the lexer would
have to know about parser state, which is not right


Need to test this works with python2 and python3

Revisit the global variable argument later

Need to add blank lines around fn/proc definitions to space the thing out a bit.
- every def needs a newline before it
- every end of def region needs a newline after it
- need to suppress double newlines, so if already output a blank line
  when starting a new def, don't do it.

This spacing could be a bit subjective.
Really it is probably a PrettyPrinter state machine that needs hooks
into PROC/ENDPROC/FN/ENDFN/STATEMENT, so that we could define different
PrettyPrinter rules or change them independently or share them between
different languages.

Put a comment tag with the date and time stamp of the conversion,
and some traceability to the release date and time stamp of the conversion tool.

Review all the spacing around operators to make sure it is consistent and good.


END.




