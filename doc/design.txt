design.txt

Python is going to be the first output language, so that AQA
style Pseudo code can be converted into first-cut python
for further development. This will be useful for school children
to develop the basis of an algorithm in pseudo code, and then
convert this into Python to further develop it.

JUST DONE
Implemented lexer/parser/syntax test for USE statement.

TODO
Get the array initialiser from base_hex_bytearray working.


USE "base"
a<-base_hex_bytearray("010203")
OUTPUT a
OUTPUT a[0]

Get an error:
  File "/Users/davidw/git_work/pc_parser/build/sandbox/pygen.py", line 500, in array1dexpr
    raise ParserException("Read from an array that does not exist")
pygen.ParserException: Read from an array that does not exist

Think it's because we're actually returning a python list, and it is not
recognising it as an array initialiser, because there is no Array() wrapper.
i.e. it is seeing it as a normal function call that returns a scalar variable,
rather than an array (how could it know it is an array??)

from base import *
a = base_hex_bytearray("010203")
print(a)

Might have to think about this one further.




Write a test case for USE runtime behaviour



Write a test case to prove that the runtime supports string concatenation
Write a test case to prove runtime supports string and number concatenation



--------------------------------------------------------------------------------
TODO

feedback from real use projects:

2. can we concatenate strings and numbers for printing?

There is nothing in the spec that disallows it.
If the runtime gets a string and a non string, it should just concatenate??
In python this will just work, as adding strings concatenates them.

*** Design a test to prove this

3. is there a way to import a python module which provides extension functions
   (e.g. each python function in a refered module just appears as a function or
   procedure that can be called from the pcode. This then makes it possible
   to easily extend the runtime with python helper modules, and it will
   be a great way to write spec's for things that are executable.

USE "base" -> generates import base
If it has a string parameter, it would follow all the string rules
and allow dots and other stuff in it easily.

*** Add to the grammar and update notes for 'language extensions'
in README.md

1. need a way to use hex constants

Could do this by importing a python helper library that exposes a load of
functions

USE base

buf = [base_hex("A3")]
buf = base_hex_array("5756A302") # using array copy

*** Write a base.py module and include it in the runtime folder.
*** Update the release script to copy all py files from runtime
into the release folder



--------------------------------------------------------------------------------
PACKAGING AND DISTRIBUTION

The point of this is to be able to package the whole toolsuite up as a python
zip archive with a __main__ in it, and for the runtime support files to magically
pop out of the zip file into the user script directory when you run the tool.
This will make distribution and use much easier.

In theory, just distribute a zip file and give them an instruction on how to
run the tool. All the necessary files will then be bound into a single file,
which works nice as a distributable package.

Could add an option to blurt out the io and array contents into the top of the
out.py file, instead of as separate files, thus generating a single python file
that can be distributed by the end user.

* run an experiment to work out the best way to embed a whole
  python module inside a python module, so that it can be
  programatically streamed out when embedded in a zip file.
  Code it up manually, be careful of escaping quotes etc.

* work out what the interface to this module is - probably
  just call a function with a file handle, and it appends it's
  docstring contents to that file handle (much better than returning
  a string and then writing that, more efficient)

* write a tool that embeds all of the files in a nominated folder
  into a single python file as big docstrings - this will be useful
  for embedding code into a zip package in a way that it can then
  just be streamed out on demand to another file in the filing system.
  Be careful of escaping quotes etc properly.

* Put this tool in the build dir

* Change the build script so that it runs this on the runtime folder
  and generates a runtime.py

* work out path to user script when parser runs

* Test that we can put this inside a zip file, run the zip file
  from python and it generates

* on parser run, auto copy io.py and array.py to user script dir
  (use file read/write rather than copy, so it works from within zip?
  need to verify we can find a way to read resources from a zip, might
  have to embed the code as a docstring so that we can read it out
  as a resource, in case the .zip is execute only.)

* auto import io.py and array.py at top of every program

Look into packaging the whole thing as a zip file with a __main__.py inside it,
and check that this works with both python2 and python3 - i.e. can we just
run python pcode.zip myprog.aqa on any platform and it will work?

The aqa_io.py and aqa_array.py modules will be embedded inside a folder in the zip
and bytestream'ed out into the user script directory every time they run the tool.
That way if they damage the file, it will be replaced on each build.

Need to write some documentation on the grammar with examples

Need to write some documentation on how to run the tool


--------------------------------------------------------------------------------
TIDY UP (LOW PRIORITY STUFF)

comments should pass through unmodified to the output code!!!
(be a real pain do, but anoying for users to loose all their comments
on translation!)

This is really hard to do, because we don't want to make comments a
gramatical item. But to get it positionally correct, the lexer would
have to know about parser state, which is not right


Need to test this works with python2 and python3

Revisit the global variable argument later

Need to add blank lines around fn/proc definitions to space the thing out a bit.
- every def needs a newline before it
- every end of def region needs a newline after it
- need to suppress double newlines, so if already output a blank line
  when starting a new def, don't do it.

This spacing could be a bit subjective.
Really it is probably a PrettyPrinter state machine that needs hooks
into PROC/ENDPROC/FN/ENDFN/STATEMENT, so that we could define different
PrettyPrinter rules or change them independently or share them between
different languages.

Put a comment tag with the date and time stamp of the conversion,
and some traceability to the release date and time stamp of the conversion tool.

Review all the spacing around operators to make sure it is consistent and good.


END.




