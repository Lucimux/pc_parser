design.txt

Python is going to be the first output language, so that AQA
style Pseudo code can be converted into first-cut python
for further development. This will be useful for school children
to develop the basis of an algorithm in pseudo code, and then
convert this into Python to further develop it.

JUST DONE
added to grammar, read expression a[expr]
addded to grammar, read expression a[expr][expr]


SPEC
globals - are we going to allow them?

Nesting - perhaps keep it really simple, fn/proc level only.
That way if you create an array in an if statement, it is usable outside
of the if statement later as it is still in scope.

The outer scope might need a list of live variables, but we could obscure
this list on entry to a function if globals not allowed.

DESIGN
The scope tracking could be really simple, on entry to a proc/fn create a scope
list, on exit from proc/fn clear the list.

If we do globals, then all we need is a global list and a proc/fn list.
If no globals, just clear the list on entry and exit to function.

When reading a variable, if it is not defined, can raise an undefined variable error.
This might also be possible at compile time as it is known.

When writing to a variable, if it is not in the list of defined live variables,
then generate an initialisation and add it to the list.


auto generate 1d array constructor call Array()
auto generate 2d array constructor call Array2D()
auto generate array init constructor call Array()


(allow array copy??)

detect use of any arrays, and import array module only if it is needed.
Auto generate the array module file from parser text, so users don't need
to have an extra file (perhaps just copy the file from a file in the project dir?)


---------

auto generate readline code
auto generate writeline code

write test cases for readline
write test cases for writeline

detect use of readline or writeline and import io helper module only if it is needed
embed this file in the project and copy into user dir if needed, so user doesn't
need to manage an extra file


I *think* when we get here, the project is finished.






