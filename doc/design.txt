design.txt

Python is going to be the first output language, so that AQA
style Pseudo code can be converted into first-cut python
for further development. This will be useful for school children
to develop the basis of an algorithm in pseudo code, and then
convert this into Python to further develop it.

JUST DONE
* All syntax tests now passing unit test harness
* listed tests for TestArrays, TestIO, TestRuntime

--------------------------------------------------------------------------------
TODO: running real code

* work out how to call a python program, are we going to import and run it
  with module.load? Need to capture it's output.
  Would be nice to be able to read variable state etc from the module at the
  end too.

* write a simple test that generates a named python program with the test
  number, then runs it and captures it's output.

* work out how we are going to test keyboard input (stdin??)

* Design the tests for TestArrays()

* Design the tests for TestIO()

* Design the tests for TestRuntime()



--------------------------------------------------------------------------------
PACKAGING AND DISTRIBUTION

TODO - runtime embedding

The point of this is to be able to package the whole toolsuite up as a python
zip archive with a __main__ in it, and for the runtime support files to magically
pop out of the zip file into the user script directory when you run the tool.
This will make distribution and use much easier.

In theory, just distribute a zip file and give them an instruction on how to
run the tool. All the necessary files will then be bound into a single file,
which works nice as a distributable package.

Could add an option to blurt out the io and array contents into the top of the
out.py file, instead of as separate files, thus generating a single python file
that can be distributed by the end user.

* run an experiment to work out the best way to embed a whole
  python module inside a python module, so that it can be
  programatically streamed out when embedded in a zip file.
  Code it up manually, be careful of escaping quotes etc.

* work out what the interface to this module is - probably
  just call a function with a file handle, and it appends it's
  docstring contents to that file handle (much better than returning
  a string and then writing that, more efficient)

* write a tool that embeds all of the files in a nominated folder
  into a single python file as big docstrings - this will be useful
  for embedding code into a zip package in a way that it can then
  just be streamed out on demand to another file in the filing system.
  Be careful of escaping quotes etc properly.

* Put this tool in the build dir

* Change the build script so that it runs this on the runtime folder
  and generates a runtime.py

* work out path to user script when parser runs

* Test that we can put this inside a zip file, run the zip file
  from python and it generates

* on parser run, auto copy io.py and array.py to user script dir
  (use file read/write rather than copy, so it works from within zip?
  need to verify we can find a way to read resources from a zip, might
  have to embed the code as a docstring so that we can read it out
  as a resource, in case the .zip is execute only.)

* auto import io.py and array.py at top of every program

--------------------------------------------------------------------------------
PACKAGING AND DISTRIBUTION

Need to test this works with python2 and python3

Look into packaging the whole thing as a zip file with a __main__.py inside it,
and check that this works with both python2 and python3 - i.e. can we just
run python pcode.zip myprog.aqa on any platform and it will work?

The aqa_io.py and aqa_array.py modules will be embedded inside a folder in the zip
and bytestream'ed out into the user script directory every time they run the tool.
That way if they damage the file, it will be replaced on each build.

Need to write some documentation on the grammar with examples

Need to write some documentation on how to run the tool

--------------------------------------------------------------------------------

TIDY UP
Need to add blank lines around fn/proc definitions to space the thing out a bit.
perhaps put a comment tag with the date and time stamp of the conversion,
and perhaps some traceability to the release date and time stamp of the conversion tool.



I *think* when we get here, the project is finished.






