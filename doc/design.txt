design.txt

Design of a grammar suitable for use with PLY.
First cut grammar with rough notes...

Notes
- no explicit string expressions in their grammar?
- but can assign string literals to variables
- no obvious way to concatenate strings
- userinput accepts numbers and strings
- output accepts numbers and strings

Python is going to be the first output language, so that AQA
style Pseudo code can be converted into first-cut python
for further development. This will be useful for school children
to develop the basis of an algorithm in pseudo code, and then
convert this into Python to further develop it.

JUST DONE
Started to flesh out first prototype backend

IF {} THEN ENDIF
| IF {} THEN ELSE ENDIF

This introduces a conflict due to THEN appearing after in both cases.
Consult the standard dangling-else grammar solution to see if we can
solve this with a hierarchy in the grammar.

Need to decide if expr is going to be passed up the parse stack,
or generated in place. It affects where the embed {} actions go
(e.g. in WHILE expr)

decision: expressions will be passed up the parse stack,
and statements will be generated on the fly.
See existing implementation of WHILE a<1 statements ENDWHILE for example.


TODO
Split the following headers out, don't pass statement lists,
but generate statement lists as we go along.
IF
IFELSE
WHILE
REPEAT
FOR
PROCEDURE
FUNCTION








